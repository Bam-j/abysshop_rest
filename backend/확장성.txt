이하는 앞으로 고려/적용해 볼 확장성을 메모
우선도는 임의로 설정함. 추후 변경 가능성 있음.

1. Spring Data JPA, REST API의 변경 (우선도: . -> 현재 개발이 완료(1.0)되고 나면 바로 착수)
현재 스프링(부트 3.0) + MyBatis 3을 사용한 SQL Mapper 스타일 + Stateful 서버로 개발되었음.
이를 REST API와 Spring Data JPA 버전으로 재개발
트랜잭션의 자동 관리, 단순 SQL 쿼리(CRUD)가 많으므로 JPA가 유리한 효과를 기대해 볼 수 있다.
또한 Stateless한 서버로 교체하면서 복잡했던 몇 가지 로직을 단순화 할 수 있음을 기대하낟.

또한 이 경우 템플릿 엔진을 JSP 대신 타임리프로 교체해야할 가능성이 높음.
JSP를 위한 설정 제거, 스프링 부트(JPA를 사용한 rest api)와의 조합이 더 편리한 타임리프의 도입.
아니면 React.js를 사용해서 더 빠르고 편리한 Stateless Rest API 도입?

2. QnA나 리뷰 시스템 (우선도: 하 또는 x)
일반적인 쇼핑몰 페이지라면 필요한 기능이지만 프로젝트의 목표 페이지 특성상 QnA는 디스코드에서 받을 예정이고,
리뷰는 불필요한 시스템이므로 확장은 고려하되 추가 가능성은 다소 낮다.

3. 장바구니 증감 시스템 (우선도: 상 또는 x) - 완료
마찬가지로 일반적인 쇼핑몰 페이지라면 반드시 필요한 기능이지만, 현재 예상되는 판매 상품이 대부분 1개만 구매하게 되는 특성을 가질 것으로 보여짐.
만약 필요하지 않다고 판단되면 현재 담기 로직을 중복 담기가 불가능하게 교체해야 함.

4. 관리자의 회원 탈퇴 기능 (우선도: 중)
관리자가 오래된 휴먼 유저 등을 임의로 탈퇴 시킬 수 있도록 하는 기능.
현재는 DB에 쿼리를 직접 적어서 실행시키는 식으로 탈퇴하거나, 회원이 로그인 한 후에 유저 정보에서 탈퇴해야함.

5. 아이디 비밀번호 찾기 (우선도: 상)
아이디는 디스코드 문의로 해결할 수 있으나 비밀번호는 불가능. 따라서 아이디/비밀번호 찾기 기능을 추가할 필요가 있음.

6. 페이지네이션 (우선도: 상) - 완료
주문 내역, 포인트 충전 요청, 포인트 충전 상세 정보는 한 페이지에 10개.
상품은 한 페이지 당 한 줄에 4개 씩 2줄이 등장하도록 페이지네이션 구현하기

7. 중복 로직 정리 및 상수나 enum을 util 패키지에 몰아넣기 (우선도: 중) - 완료
비슷한 로직이 상당히 많기에 이들을 정리하고
상수, enum, mapper 패키지를 util 패키지 내부로 옮기는 리팩토링 수행하기

8. 요청, 메소드, 변수명 리팩토링 (우선도: 중)
일부 요청, 메소드, 변수명이 통일되어 있지 않음

9. 상품 카테고리 (우선도: 하)
상품이 많아질 것을 대비해 상품 리스트를 카테고리화한다.
서버 초기 출시 상품이 10개 내외정도 될 것으로 예상되어서 초기 개발에선 빠졌음.

10. 관리자 권한, 회원 권한에 따른 페이지 입장 제한하기 (우선도: 상) - 완료
현재 서버는 Session에 user데이터를 저장하므로 session에서 user.userType을 가져와서 요청 직전에 권한을 검사한다.
관리자만 접근 가능한 것: 관리자 페이지들에 대한 요청들 (userType이 'admin'이 아닌경우에는 요청을 거부)
회원만 접근 가능한 것: 회원의 장바구니, 마이페이지에 대한 요청들 (url을 통해 세션에 저장된 userId와 다른 id를 삽입 후 요청을 보내면 거부)
모두가 접근 가능한 것: 메인 페이지, 상품 detail 페이지, 로그인, 회원 가입

추후 Rest API로 변경시 Session에 데이터를 저장하지 않게 되므로 그때는 다른 방법으로 할 것.
